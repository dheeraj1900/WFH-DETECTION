import face_recognitionimport cv2import numpy as npimport pyautoguifrom selenium import webdriverimport datetime as dtimport osimport timeimport capture as cpimport info import mailimport log#data=info.takinginput()current_time = str(dt.datetime.now())#file=log.open_file()#readfile=log.read_file()#if not readfile.read():#    log_data="################### file created at "+ f'{current_time}' + " . ###################################### \n"#else :#    log_data="################### file updated at "+ f'{current_time}' + " . ###################################### \n"#log.write_file(file,log_data)#User = "dheeraj"#From = "dheeraj.gametattav@gmail.com"#Password = "8700243345"#To = "monu.196d@gmail.com"##headers = "From:"+f'{From}'+" \r\n"#headers += "To:"+ f'{To}'+" \r\n"#headers += "Subject: Testing \r\n"#headers += "\r\n"#Message= headers + f'{User}'+ " login at "+ CurrentTime#messagesent=mail.send_mail(User,From,Password,To,Message)root_encoding = cp.capturephoto() # main pic#log_data="Image captured at "+ f'{dt.datetime.now().time()}' + ".\n "#log.write_file(file,log_data)#User =data[0] # knownface name#From=data[1]#Password=data[2]##To=data[3]#headers = "From:" + f'{From}' + " \r\n"#headers += "To:" + f'{To}' + " \r\n"#headers += "Subject: Testing \r\n"#headers += "\r\n"current_time = str(dt.datetime.now().time())#Message =  f'{User}' + " login at " + current_time#messagesent = mail.send_mail(User,From,Password,To,Message)#log_data=f'{User}' + " login at " + current_time + ". \n"#log.write_file(file,log_data)#global last_undect_time,last_face_match_time#last_undetect_time=0#last_face_match_time=0if  root_encoding :    video_capture=cv2.VideoCapture(0,cv2.CAP_DSHOW)     start_time=dt.datetime.now()    undetect_start_time=time.perf_counter()    face_match_start_time=time.perf_counter()    total_undetect_time=0    total_detect_time=0    total_unknown_detect_time=0    print(start_time)    while True:        ret, frame = video_capture.read()        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)        face_locations = face_recognition.face_locations(frame)        #  findig if face located or not        if len(face_locations) == 0:               last_undetect_time=time.perf_counter()            face_match_start_time=time.perf_counter() # setting face match start time            print("last undetct time ==>"+ str(last_undetect_time))            undetect_time=last_undetect_time-undetect_start_time # important undect time 1 minute            if undetect_time>=60:                total_undetect_time+=undetect_time # important total undect time                print("user is not decting for "+ str(total_undetect_time)+ " sec.")                undetect_time=0                undetect_start_time=time.perf_counter()            print("undetct time ==>"+ str(undetect_time))            print("unable to identify the faces => Time  : " + f'{dt.datetime.now().time()}')                    # lopp in a faces............        for a,b,c,d in face_locations:            cv2.rectangle(frame,(d,a),(b,c),(255,0,255),3)                      face_encodings = face_recognition.face_encodings(frame,face_locations)            # check have face encodings or not                    if len(face_encodings) != 0:                                result = face_recognition.compare_faces(root_encoding,face_encodings[0],tolerance=0.55)                face_distance = face_recognition.face_distance(root_encoding,face_encodings[0])                            # checking face is matching or not....            if result[0] == True  :                                last_face_match_time=time.perf_counter()                print("last face match time ==> "+  str(last_face_match_time))                detect_time=last_face_match_time-face_match_start_time                print(" detect time is ==> "+ str(detect_time))                if detect_time>=60:                    total_detect_time+=detect_time                    print("total detect time is ==> "+ str(total_detect_time))                    # if detect time is greater than 60 then undetect_start_time=time.perf_counter()                    undetect_start_time=time.perf_counter()                    detect_time=0                    face_match_start_time=time.perf_counter()                print("Face is matching ==> Time : ",f'{dt.datetime.now().time()}')                cv2.putText(frame,"known",(b-100,c+50),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),2,cv2.LINE_AA)                print(face_distance)            else:                last_undetect_time=time.perf_counter()                face_match_start_time=time.perf_counter() # setting face match start time                print("last unknown face detect time ==>"+ str(last_undetect_time))                undetect_time=last_undetect_time-undetect_start_time # important undect time 1 minute                if undetect_time>=60:                    total_unknown_detect_time+=undetect_time                    total_undetect_time+=undetect_time # important total undect time                    print(" unknown face is decting for "+ str(total_undetect_time)+ " sec.")                    undetect_time=0                    undetect_start_time=time.perf_counter()                print("UNKNOWN FACE ==> Face is not matching => Time :",f'{dt.datetime.now().time()}')                cv2.putText(frame,"Unknown",(b-100,c+50),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),2,cv2.LINE_AA)                print(face_distance)        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)        cv2.imshow("capturing",frame)        k = cv2.waitKey(1)        if k % 256 == 27:            end_time=dt.datetime.now()            print(end_time)            video_capture.release()            cv2.destroyAllWindows()            print("start and end time is "+ str(end_time-start_time))                        print("window is closing...")            break    video_capture.release()    cv2.destroyAllWindows()else:    print("\n\n\n\n")    print(" you are not logged in yet try again")